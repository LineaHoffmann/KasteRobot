@startuml
scale 0.75



/' Objects '/

class RobotData {
	+isConnected : bool
	+robotState : int
	+IP : std::string
}


class app {
	+app()
	+~app()
	+OnInit() : bool
}


class cImagePanel {
	+cImagePanel(wxWindow* parent, wxStandardID id, const wxPoint& position, const wxSize& size, const wxString& name)
	+~cImagePanel()
	+setNewImage(const wxImage& img) : void
}


class cMain {
	+cMain()
	+~cMain()
	+popStrFromStatus() : void
	+pushStrToStatus(std::string& msg) : void
	+setLogicControllerPointer(std::unique_ptr<xController> controller) : void
}


namespace x_err {
	class error {
		+error(const std::string& msg)
	}
}


class gripperData {
	+force : std::string
	+gripstate : std::string
	+pos : std::string
	+speed : std::string
	+temp : std::string
}


class point2D <template <class T>> {
	+point2D()
	+point2D(T _x, T _y)
	+static_assert(std::is_floating_point_v<T>, "Only for floating point numbers!")
	+x : T
	+y : T
	+operator==(const point2D<T>& p) : bool
	+operator*(const double& mul) : point2D<T >
	+operator+(const point2D<T>& p) : point2D<T >
	+operator-(const point2D<T>& p) : point2D<T >
	+operator/(const double& div) : point2D<T >
	+operator<<(std::ostream& os, const point2D& p) : std : : ostream&
}


class point3D <template <class T>> {
	+point3D()
	+point3D(T _x, T _y, T _z)
	+static_assert(std::is_floating_point_v<T>, "Only for floating point numbers!")
	+x : T
	+y : T
	+z : T
	+operator==(const point3D<T>& p) : bool
	+operator*(const double& mul) : point3D<T >
	+operator+(const point3D<T>& p) : point3D<T >
	+operator-(const point3D<T>& p) : point3D<T >
	+operator/(const double& div) : point3D<T >
	+operator<<(std::ostream& os, const point3D& p) : std : : ostream&
}


class point6D <template <class T>> {
	+point6D()
	+point6D(T _x, T _y, T _z, T _rx, T _ry, T _rz)
	+static_assert(std::is_floating_point_v<T>, "Only for floating point numbers!")
	+rx : T
	+ry : T
	+rz : T
	+x : T
	+y : T
	+z : T
	+operator==(const point6D<T>& p) : bool
	+operator*(const double& mul) : point6D<T >
	+operator+(const point6D<T>& p) : point6D<T >
	+operator-(const point6D<T>& p) : point6D<T >
	+operator/(const double& div) : point6D<T >
	+operator<<(std::ostream& os, const point6D& p) : std : : ostream&
}


class qDatabaseBallEntry <template <typename T>> {
	+qDatabaseBallEntry()
	+qDatabaseBallEntry(const std::string& t, const std::string& d, T di, const point2D<T>& p)
	+qDatabaseBallEntry(T di, const point2D<T>& p)
	+static_assert(std::is_floating_point_v<T>, "Must be a floating point value!")
	+ballDiameter : T
	+ballPosition : point2D<T>
	+operator<<(std::ostream& os, const qDatabaseBallEntry& p) : std : : ostream&
}


class qDatabaseEntry {
	#qDatabaseEntry(const std::string& desc)
	#qDatabaseEntry(const std::string& t, const std::string& desc)
	+~qDatabaseEntry()
	#operator<<(std::ostream& os, const qDatabaseEntry& p) : std : : ostream&
	+entryType : std::string
	+timestamp : std::string
}


class qDatabaseGripperEntry <template <typename T>> {
	+qDatabaseGripperEntry()
	+qDatabaseGripperEntry(const std::string& t, const std::string& d, bool suc, T s, T e)
	+qDatabaseGripperEntry(bool suc, T s, T e)
	+static_assert(std::is_floating_point_v<T>, "Must be a floating point value!")
	+end : T
	+start : T
	+successful : bool
	+operator<<(std::ostream& os, const qDatabaseGripperEntry& p) : std : : ostream&
}


class qDatabaseHandler {
	+qDatabaseHandler()
	+~qDatabaseHandler()
	+showTables() : std::vector<Row>*
	+retriveData() : std::vector<qDatabaseEntry*>
	+disconnect() : void
	+pushLogEntry(qDatabaseEntryDerivative entry) : void
	+pushLogEntryPtr(qDatabaseEntry* entry) : void
	+setDatabaseCredentials(const std::string& user, const std::string& password, const std::string& hostname, const std::string& schema, uint32_t port) : void
}


class qDatabaseMoveEntry <template <typename T>> {
	+qDatabaseMoveEntry()
	+qDatabaseMoveEntry(const std::string& t, const std::string& d, const point6D<T>& s, const point6D<T>& e, ROBOT_MOVE_TYPE m)
	+qDatabaseMoveEntry(const point6D<T>& s, const point6D<T>& e, ROBOT_MOVE_TYPE m)
	+static_assert(std::is_floating_point_v<T>, "Must be a floating point value!")
	+moveType : ROBOT_MOVE_TYPE
	+end : point6D<T>
	+start : point6D<T>
	+operator<<(std::ostream& os, const qDatabaseMoveEntry& p) : std : : ostream&
}


class qDatabaseThrowEntry <template <typename T>> {
	+qDatabaseThrowEntry()
	+qDatabaseThrowEntry(const std::string& t, const std::string& d, bool s, const point6D<T>& rp, T v1, T v2, T de)
	+qDatabaseThrowEntry(bool s, const point6D<T>& rp, T v1, T v2, T de)
	+static_assert(std::is_floating_point_v<T>, "Must be a floating point value!")
	+deviation : T
	+releaseVelocityActual : T
	+releaseVelocityCalced : T
	+successful : bool
	+releasePoint : point6D<T>
	+operator<<(std::ostream& os, const qDatabaseThrowEntry& p) : std : : ostream&
}


class treeInfo {
}


namespace x_err {
	class what {
		+{static} CAMERA_GRAB_ERROR : inline static const std::string
		+{static} CAMERA_NOT_CONNECTED : inline static const std::string
		+{static} CAMERA_NOT_STARTED : inline static const std::string
		+{static} CAMERA_WRONG_PATH : inline static const std::string
		+{static} GRIPPER_NOT_STARTED : inline static const std::string
		+{static} GRIPPER_NO_ACK : inline static const std::string
		+{static} MATH_NO_RESULT : inline static const std::string
		+{static} NO_IMPLEMENTATION : inline static const std::string
		+{static} ROBOT_BAD_IP : inline static const std::string
		+{static} ROBOT_MOVE_NOT_FOUND : inline static const std::string
		+{static} ROBOT_NOT_CONNECTED : inline static const std::string
		+{static} ROBOT_QVEC_NOT_FOUND : inline static const std::string
		+{static} ROBWORK_INVALID_DATA : inline static const std::string
	}
}


class xBaslerCam {
	+xBaslerCam(const std::string& calibrationPath, const double exposure, const uint64_t framerate)
	+~xBaslerCam()
	+hasNewImage() : bool
	+isConnected() : bool
	+start() : bool
	+getImage() : cv::Mat
	+getMapping() : std::pair<cv::Mat , cv::Mat>
	+baslerCamThread : std::thread*
	+calibrate() : void
	+{static} liveCalibration(std::shared_ptr<xBaslerCam> liveCamera, std::string path) : void
	+setFrameRate(uint64_t value) : void
	+setMyExposure(double value) : void
	+setPath(const std::string& calibrationPath) : void
	+shutdown() : void
	+updateMapping(std::pair<cv::Mat, cv::Mat> newMapping) : void
}


class xCollisionDetector {
	+xCollisionDetector()
	+xCollisionDetector(std::string filePath)
	+checkCollision(std::vector<std::vector<double> > jointConfigs) : bool
	+checkQ(rw::math::Q jointConfig) : bool
	+inverseKinematic(std::vector<double> jointConfigs) : std::vector<double>
	+qToVec(rw::math::Q q) : std::vector<double>
	+makePath(std::vector<double> Qbeg, std::vector<double> Qend) : std::vector<std::vector<double> >
	+moveFromTo(std::vector<double> currentPose, std::vector<double> targetXYZ) : std::vector<std::vector<double> >
	+loadWorkcell(std::string filePath) : void
}


class xController {
	+xController()
	+~xController()
	+hasNewImage() : bool
	+getImage() : cv::Mat
	+getDatabaseEntries() : std::vector<qDatabaseEntry*>
	+createPath(std::vector<std::vector<double> > q) : void
	+fillInfo(treeInfo& info) : void
	+guiButtonPressed(BINDING_ID id, T data) : void
	+setCamera(std::shared_ptr<xBaslerCam> camera) : void
	+setGripper(std::shared_ptr<xGripperClient> gripper) : void
	+setRobot(std::shared_ptr<xUrControl> robot) : void
	+{static} testDetectAndPickUp(std::shared_ptr<ximageHandler> mImagehandler, std::shared_ptr<xBaslerCam> mCamera, std::shared_ptr<xUrControl> mRobot, std::shared_ptr<xGripperClient> mGripper, std::shared_ptr<xCollisionDetector> mCollisionDetector) : void
	+testDetectAndPickUp2() : void
	+testThrowSpeedJ(double angle) : void
	+throwBall(double x, double y) : void
}


class xGripperClient {
	+xGripperClient()
	+~xGripperClient()
	+isConnected() : bool
	+isReady() : bool
	+writeRead(std::string mCommand) : bool
	+getPos() : double
	+getData() : gripperData
	+addDatabasePointer(std::shared_ptr<qDatabaseHandler> ptr) : void
	+autoreadReq() : void
	+connectReq(std::pair<std::string, int> ipPort) : void
	+disconnectReq() : void
	+grip() : void
	+home() : void
	+release() : void
	+setGripperPolling(int polling) : void
	+setIpPort(std::pair<std::string, int>) : void
}


class xMath {
	-{static} deg2rad(double deg) : double
	+{static} calculateTCPRotation(const rw::math::Vector3D<>& vect) : rw::math::Rotation3D<>
	-{static} baseRadian : static double constexpr
	+{static} distance3d_to_v0_xyAngle_czAngle(const std::array<double, 3>& distanceXYZ, const std::array<double, 2>& angleLim, const std::array<double, 2>& velocityLim, double steps, double g) : std::array<double , 3>
	+{static} ball_position_to_robotframe(std::tuple<bool, cv::Mat, cv::Point2f, float> data) : std::vector<double>
	+{static} calcThrow(std::vector<double>& q, double x, double y) : void
}


class xUrControl {
	+xUrControl()
	+xUrControl(std::string IP)
	+~xUrControl()
	+getURStruct() : RobotData
	+getIsConnected() : bool {query}
	+getIsBusy() : std::atomic<bool> {query}
	+getPollingRate() : std::atomic<int> {query}
	+getIP() : std::string& {query}
	+getCurrentPose() : std::vector<double>
	+addDatabasePointer(std::shared_ptr<qDatabaseHandler> ptr) : void
	+setConnect(std::string IP) : void
	+setDisconnect() : void
	+setIP(const std::string& value) : void
	+setMove(ROBOT_MOVE_TYPE moveMode) : void
	+setMove(ROBOT_MOVE_TYPE moveMode, std::vector<std::vector<double> > inputQ) : void
	+setMove(ROBOT_MOVE_TYPE moveMode, std::vector<std::vector<double> > inputQ, double acc, double speed) : void
	+setPollingRate(int pollingRate) : void
	+speedJMove(double t) : void
	+speedJStop() : void
	+startPolling() : void
	+stopPolling() : void
}


class ximageHandler {
	+ximageHandler()
	+ximageHandler(cv::Mat cleanImg)
	+cutOutTable() : bool
	+showResult : bool
	+getInputImage() : cv::Mat {query}
	+getTable() : cv::Mat
	+getPositionCM() : cv::Point2f {query}
	+getRadiusCM() : float {query}
	+detectBall() : std::pair<bool , cv::Mat>
	+findBallAndPosition(cv::Mat image) : std::tuple<bool , cv::Mat , cv::Point2f , float>
	+addDatabasePointer(std::shared_ptr<qDatabaseHandler> ptr) : void
	+ballColor(int hue, int spread) : void
	+loadImage(cv::Mat image) : void
	+setMinMaxRadius(float minCM, float maxCM) : void
	+setRobotBase(float xcm, float ycm) : void
}


enum BINDING_ID {
	ID_BTN_CAMERA_CUT_TABLE
	ID_BTN_CAMERA_FINDBALL
	ID_BTN_CAMERA_LOAD_DETECTOR_SETTINGS
	ID_BTN_CAMERA_RECALIBRATE
	ID_BTN_CAMERA_START
	ID_BTN_CAMERA_STOP
	ID_BTN_DATABASE_TRY_CONNECTION
	ID_BTN_DATABASE_UPDATE_TREE
	ID_BTN_GRIPPER_AUTOSEND
	ID_BTN_GRIPPER_CONNECT
	ID_BTN_GRIPPER_DISCONNECT
	ID_BTN_GRIPPER_GRIP
	ID_BTN_GRIPPER_HOME
	ID_BTN_GRIPPER_RELEASE
	ID_BTN_GRIPPER_SEND_CMD
	ID_BTN_ROBOT_CONNECT
	ID_BTN_ROBOT_DISCONNECT
	ID_BTN_ROBOT_SEND_CMD
	ID_BTN_ROBOT_SEND_HOME
	ID_BTN_ROBOT_SEND_PICKUP
	ID_BTN_ROBOT_SEND_POS
	ID_BTN_ROBOT_UPDATE
	ID_BTN_TESTING_DATABASE_INSERT
	ID_BTN_TESTING_DETECT_PICK
	ID_BTN_TESTING_SPEEDJ
	ID_BTN_TESTING_THROW
	ID_BTN_TESTING_XYZ_VVA
	ID_DATABASE_SUB_TREE
	ID_MENU_ABOUT
	ID_MENU_EXIT
	ID_MENU_SAVE_LOG
	ID_MENU_SAVE_SNAPSHOT
	ID_TIMER_INFOTREE_UPDATE
	ID_TIMER_VIEW1_UPDATE
	ID_TIMER_VIEW2_UPDATE
}


enum OBJSTATE {
	CAMERA_NOT_CONNECTED
	CAMERA_NOT_RUNNING
	CAMERA_RUNNING
	DATABASE_NOT_CONNECTED
	DATABASE_RUNNING
	DEFAULT
	GRIPPER_NOT_CONNECTED
	GRIPPER_RUNNING
	ROBOT_NOT_CONNECTED
	ROBOT_NOT_RUNNING
	ROBOT_RUNNING
}


enum ROBOT_MOVE_TYPE {
	HOME
	MOVE_DEFAULT
	MOVE_JIK
	MOVE_JLIN
	MOVE_JPATH
	MOVE_L
	MOVE_LFK
	MOVE_TLIN
	PICKUP
	SERVOJ
	SPEEDJ
}




/' Inheritance relationships '/

.qDatabaseEntry <|-- .qDatabaseBallEntry


.qDatabaseEntry <|-- .qDatabaseGripperEntry


.qDatabaseEntry <|-- .qDatabaseMoveEntry


.qDatabaseEntry <|-- .qDatabaseThrowEntry





/' Aggregation relationships '/

.app *-- .cMain


.cMain "2" o-- .cImagePanel


.cMain o-- .qDatabaseEntry


.cMain o-- .treeInfo


.cMain *-- .xController


.qDatabaseBallEntry *-- .point2D


.qDatabaseHandler o-- .qDatabaseEntry


.qDatabaseMoveEntry "2" *-- .point6D


.qDatabaseThrowEntry *-- .point6D


.xController *-- .qDatabaseHandler


.xController *-- .xBaslerCam


.xController *-- .xCollisionDetector


.xController *-- .xGripperClient


.xController *-- .xUrControl


.xController *-- .ximageHandler


.xGripperClient *-- .qDatabaseHandler


.xUrControl *-- .RobotData


.xUrControl *-- .qDatabaseHandler


.ximageHandler *-- .qDatabaseHandler





@enduml
